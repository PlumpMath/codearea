// Generated by CoffeeScript 1.3.1
var chars, locked, nc2md, put, ss, store, tag,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

tag = function(id) {
  return document.getElementById(id);
};

chars = ['>', '-', '*', ' ', '+'];

ss = '  ';

nc2md = function(file) {
  var copy, line, list, normal, plain, _i, _len, _ref;
  list = file.split('\n');
  list = list.map(function(line) {
    line = line.trimRight();
    if (line.lenth <= 2) {
      return line;
    } else {
      return line = line.slice(0, 2) === ss ? ss + line : line + ss;
    }
  });
  copy = [];
  normal = true;
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    line = list[_i];
    plain = !(line[0] != null) ? void 0 : (_ref = line[0], __indexOf.call(chars, _ref) >= 0) ? false : true;
    if (plain !== normal) {
      copy.push('');
    }
    normal = plain;
    copy.push(line);
  }
  return copy.join('\n');
};

put = function(str) {
  return marked(nc2md(str));
};

store = void 0;

locked = false;

window.onload = function() {
  var f, text, view;
  text = tag('text');
  view = tag('view');
  text.value = localStorage.text;
  text.focus();
  textareaEditor('text');
  view.innerHTML = put(text.value);
  text.onkeyup = function() {
    if (!locked) {
      return view.innerHTML = put(text.value);
    }
  };
  document.onkeydown = function(e) {
    if (e.keyCode === 27) {
      if (locked) {
        locked = false;
        return text.value = store;
      } else {
        locked = true;
        store = text.value;
        text.value = nc2md(store, false);
        text.selectionStart = 0;
        return text.selectionStart = -1;
      }
    }
  };
  f = function() {
    return localStorage.text = text.value;
  };
  return setInterval(f, 100);
};
